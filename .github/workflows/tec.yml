name: Trillek Engine CI

on:
  pull_request:
  push:
    tags: [ v* ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, windows-2016, ubuntu-18.04, ubuntu-16.04, macOS-latest ]
        arch: [ x86, x64 ]
        include:
          - os: windows-latest
            vcpkgCommitId: '5eea585548058540c3b73d087eb101c033b5fa85'
            vcpkgTripletOs: windows
          - os: windows-2016
            vcpkgCommitId: '5eea585548058540c3b73d087eb101c033b5fa85'
            vcpkgTripletOs: windows
          - os: ubuntu-18.04
            vcpkgCommitId: 'ec6fe06e8da05a8157dc8581fa96b36b571c1bd5'
            vcpkgTripletOs: linux
          - os: ubuntu-16.04
            vcpkgCommitId: 'ec6fe06e8da05a8157dc8581fa96b36b571c1bd5'
            vcpkgTripletOs: linux
          - os: macOS-latest
            vcpkgCommitId: 'ec6fe06e8da05a8157dc8581fa96b36b571c1bd5'
            vcpkgTripletOs: osx
        exclude:
          - os: ubuntu-18.04
            arch: x86
          - os: ubuntu-16.04
            arch: x86
          - os: macOS-latest
            arch: x86
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: lukka/get-cmake@latest
    - name: Install os deps (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get install libgl1-mesa-dev xorg-dev libglu1-mesa-dev libxinerama-dev libxcursor-dev p7zip-full -y
    - name: Set gcc-9 on Ubuntu16.04
      uses: lukka/set-shell-env@v1
      if: contains( matrix.os, 'ubuntu-16.04')
      with:
        CC: gcc-9
        CXX: g++-9
    - name: Set vcpkg's response file path used as part of cache's key.
      uses: lukka/set-shell-env@v1
      with:
        VCPKGRESPONSEFILE: ${{ github.workspace }}/vcpkg_response_files/vcpkg_${{ matrix.arch }}-${{ matrix.vcpkgTripletOs }}.txt
        VCPKGCOMMONRESPONSEFILE: ${{ github.workspace }}/vcpkg_response_files/vcpkg_common.txt
    - name: Restore artifacts, or run vcpkg, build and cache artifacts
      uses: lukka/run-vcpkg@v4
      id: runvcpkg
      with:
        vcpkgArguments: '@${{ env.VCPKGCOMMONRESPONSEFILE }} @${{ env.VCPKGRESPONSEFILE }}'
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        appendedCacheKey: '${{ hashFiles(env.VCPKGCOMMONRESPONSEFILE) }}${{ hashFiles(env.VCPKGRESPONSEFILE) }}'
        vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'
    - name: Configure cmake and build
      uses: lukka/run-cmake@v3
      id: runcmake_cmd
      with:
        cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        cmakeBuildType: 'Release'
        useVcpkgToolchainFile: true
        buildWithCMake: true
        buildDirectory: '${{ github.workspace }}/build'
    - name: Upload the build artifact
      uses: actions/upload-artifact@v2
      with:
        name: 'trillek-${{ matrix.os }}'
        path: |
          assets/
          ${{ github.workspace }}/build/client/trillek-client
          ${{ github.workspace }}/build/client/trillek-client.exe
          ${{ github.workspace }}/build/client/*.dll
          ${{ github.workspace }}/build/server/trillek-serverd
          ${{ github.workspace }}/build/server/trillek-server.exe
        if-no-files-found: ignore
  prepublish:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    name: Create Release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: '${{ github.ref }}'
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
  publish:
    runs-on: ubuntu-latest
    needs: prepublish
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, windows-2016, ubuntu-18.04, ubuntu-16.04, macOS-latest ]
        arch: [ x64 ]
    if: startsWith(github.ref, 'refs/tags/v')
    name: Upload Release Asset(s)
    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: 'trillek-${{ matrix.os }}'
      - name: Package release
        run: |
          zip --junk-paths -r -u  trillek-${{ matrix.os }}.zip build/client
          zip --junk-paths -r -u  trillek-${{ matrix.os }}.zip build/server
          zip -r -u trillek-${{ matrix.os }}.zip assets/
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepublish.outputs.upload_url }}
          asset_path: './trillek-${{ matrix.os }}.zip'
          asset_name: 'trillek-${{ matrix.os }}.zip'
          asset_content_type: application/zip
