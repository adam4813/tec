syntax = "proto2";

package tec.proto;

message LocalPosition { // a position for rendering or offsets
	optional float x = 1;
	optional float y = 2;
	optional float z = 3;
}

message Position { // a position within the simulation world
	optional float x = 1;
	optional float y = 2;
	optional float z = 3;
}

message Quaternion {
	optional float i = 1;
	optional float j = 2;
	optional float k = 3;
	optional float r = 4 [default = 1.0];
}

message SizeVector {
	optional float x = 1 [default = 1.0];
	optional float y = 2 [default = 1.0];
	optional float z = 3 [default = 1.0];
}

message NormalVector {
	optional float x = 1 [default = 0.0];
	optional float y = 2 [default = -1.0];
	optional float z = 3 [default = 0.0];
}

message Renderable {
	optional string shader_name = 1;
	optional string mesh_name = 2;
	optional bool hidden = 3;
	optional Position position = 4;
	optional Quaternion orientation = 5;
}

message View {
	optional bool active = 1;
}

message Animation {
	optional string animation_name = 1;
	optional string mesh_name = 2;
	optional bool loop = 3;
	optional bool play = 4;
}

message CollisionBody {
	message Sphere {
		required float radius = 1;
	};
	message Capsule {
		required float radius = 1;
		required float height = 2;
	};
	optional bool disable_deactivation = 1;
	optional bool disable_rotation = 2;
	oneof shape {
		SizeVector box = 3;
		Sphere sphere = 4;
		Capsule capsule = 5;
	}
	optional float mass = 6;
}

message Velocity {
	optional float linear_x = 1;
	optional float linear_y = 2;
	optional float linear_z = 3;
	optional float angular_x = 4;
	optional float angular_y = 5;
	optional float angular_z = 6;
}

message AudioSource {
	optional bool looping = 1;
	optional string audio_name = 2;
	optional bool playing = 3;
	optional uint32 volume = 4;
}

message Light {
	optional float color_x = 1;
	optional float color_y = 2;
	optional float color_z = 3;
	optional float ambient_intensity = 4;
	optional float diffuse_intensity = 5;
	message Attenuation {
		optional float constant = 1;
		optional float linear = 2;
		optional float exponential = 3;
	}
	optional Attenuation attenuation = 6;
	optional float cutoff = 7;
	optional NormalVector direction = 8;
}

message LuaScript {
	optional string script_name = 1;
}

message VoxelVolume {
	optional float dummy = 1; // WIP
}

message ComputerScreen {
	optional bytes text_buffer = 1;
	optional bytes font_buffer = 2;
	required uint32 buffer_ptr = 3;
	required uint32 font_ptr = 4;
	required uint32 vsync_msg = 5;
	required uint32 a = 6;
	required uint32 b = 7;
	required uint32 d = 8;
	required uint32 e = 9;
}

message ComputerKeyboard {}

message Computer {
	message Device {
		required uint32 slot = 1;
		oneof device {
			ComputerScreen computerScreen = 2;
			ComputerKeyboard computerKeyboard = 3;
		}
	}
	repeated Device devices = 1;
	oneof memory {
		bytes ram = 2; // uncompressed
		bytes zram = 5; // zlib compression
	}
	message CPU {
		message TR3200 {
			repeated uint32 registers = 1;
			required uint32 pc = 2;
			required uint32 wait_cycles = 3;
			required uint32 int_msg = 4;
			required bool interrupt = 5;
			required bool step_mode = 6;
			required bool skiping = 7;
			required bool sleeping = 8;
		}
		message DCPU16N {
			repeated uint32 registers = 1;
			required uint32 pc = 2;
			required uint32 wait_cycles = 3;
			required uint32 int_msg = 4;
			required bool interrupt = 5;
			required bool step_mode = 6;
			required bool skiping = 7;
			required bool sleeping = 8;
		}
		oneof cpu {
			TR3200 tr3200 = 1;
			DCPU16N dcpu16n = 2;
		}
	}
	required CPU cpu = 3;
	optional string rom_file = 4;
}

message Component {
	oneof component {
		// keep name the same that the struct/class of the component!
		Renderable renderable = 1;
		Position position = 2;
		Quaternion orientation = 3;
		View view = 4;
		Animation animation = 5;
		SizeVector Scale = 6;
		CollisionBody collision_body = 7;
		Velocity velocity = 8;
		AudioSource audio_source = 9;
		Light pointLight = 10;
		Light directionalLight = 11;
		Light spotLight = 12;
		VoxelVolume voxelVolume = 13;
		Computer computer = 14;
		LuaScript luaScript = 100;
	}
}

message Entity {
	required uint64 id = 1;
	repeated Component components = 2;
}

message EntityFileList {
	repeated string entity_file_list = 1;
}
